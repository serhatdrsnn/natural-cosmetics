// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaturalCosmeticsECommerce.Data;

#nullable disable

namespace NaturalCosmeticsECommerce.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("CartItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Doğal içerikli sıvı takviye ürünleri",
                            ImageUrl = "/img/sivi_takviye.png",
                            Name = "Sıvı Takviyeler"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Bitkisel sabun çeşitleri",
                            ImageUrl = "/img/sabun.png",
                            Name = "Sabunlar"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Bitkisel damla ürünleri",
                            ImageUrl = "/img/damla.png",
                            Name = "Damlalar"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Diğer doğal kozmetik ürünleri",
                            ImageUrl = "",
                            Name = "Diğer Ürünler"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Doğal cilt bakım ürünleri",
                            ImageUrl = "/img/cilt_bakim.png",
                            Name = "Cilt Bakımı"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Bitkisel krem çeşitleri",
                            ImageUrl = "/img/krem.png",
                            Name = "Kremler"
                        });
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("FavoriteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "",
                            ImageUrl = "",
                            Name = "Gül Suyu 250ml",
                            Price = 250m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "",
                            ImageUrl = "",
                            Name = "Çam Çırası Suyu 500g",
                            Price = 330m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "",
                            ImageUrl = "",
                            Name = "Çam Çırası Suyu 1L",
                            Price = 500m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Description = "",
                            ImageUrl = "",
                            Name = "Kan Şurubu 1L",
                            Price = 500m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Description = "",
                            ImageUrl = "",
                            Name = "Keçi Sütlü Sabun",
                            Price = 160m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "",
                            ImageUrl = "",
                            Name = "Sidr Sabun",
                            Price = 160m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Description = "",
                            ImageUrl = "",
                            Name = "Bıttım Sabun",
                            Price = 160m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4,
                            Description = "",
                            ImageUrl = "",
                            Name = "Kantaron Yağı 250ml",
                            Price = 250m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Description = "",
                            ImageUrl = "",
                            Name = "Kantaron Yağı 100ml",
                            Price = 200m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4,
                            Description = "",
                            ImageUrl = "",
                            Name = "İğde Tozu 200g",
                            Price = 250m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 4,
                            Description = "",
                            ImageUrl = "",
                            Name = "Ceviz Yağı 100ml",
                            Price = 220m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4,
                            Description = "",
                            ImageUrl = "",
                            Name = "Ceviz Yağı 250ml",
                            Price = 425m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            Description = "",
                            ImageUrl = "",
                            Name = "D Vitamini Kompleks (3-6-9)",
                            Price = 400m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3,
                            Description = "",
                            ImageUrl = "",
                            Name = "Kulak Burun Damla",
                            Price = 400m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3,
                            Description = "",
                            ImageUrl = "",
                            Name = "SinPlus",
                            Price = 450m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 5,
                            Description = "",
                            ImageUrl = "",
                            Name = "Anti Aging Leke Giderici Serum",
                            Price = 600m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 5,
                            Description = "",
                            ImageUrl = "",
                            Name = "Sivilce Akne Kremi 50ml",
                            Price = 350m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 5,
                            Description = "",
                            ImageUrl = "",
                            Name = "Tüy Azaltıcı Losyon",
                            Price = 550m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 6,
                            Description = "Kuşburnu ve menekşe içerikli",
                            ImageUrl = "",
                            Name = "Kırmızı Krem 40cc",
                            Price = 300m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 6,
                            Description = "",
                            ImageUrl = "",
                            Name = "Kırmızı Krem 190cc",
                            Price = 500m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 6,
                            Description = "Ardıç ve susam yağı içerikli",
                            ImageUrl = "",
                            Name = "Katran Krem 40cc",
                            Price = 300m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 6,
                            Description = "",
                            ImageUrl = "",
                            Name = "Katran Krem 190cc",
                            Price = 500m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 6,
                            Description = "Ağrı kesici kas gevşetici masaj merhemi",
                            ImageUrl = "",
                            Name = "Akıllı Krem 50ml",
                            Price = 300m,
                            StockQuantity = 100
                        });
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NaturalCosmeticsECommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NaturalCosmeticsECommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaturalCosmeticsECommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NaturalCosmeticsECommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.CartItem", b =>
                {
                    b.HasOne("NaturalCosmeticsECommerce.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("NaturalCosmeticsECommerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaturalCosmeticsECommerce.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Favorite", b =>
                {
                    b.HasOne("NaturalCosmeticsECommerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaturalCosmeticsECommerce.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Order", b =>
                {
                    b.HasOne("NaturalCosmeticsECommerce.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Product", b =>
                {
                    b.HasOne("NaturalCosmeticsECommerce.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("NaturalCosmeticsECommerce.Models.User", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
